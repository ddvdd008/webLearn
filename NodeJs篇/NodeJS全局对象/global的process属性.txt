1.定义
   它用于描述当前Node.js进程状态的对象，提供了一个与操作系统的简单接。通常在你写本地命令行程序的时候，少不了要和它打交道。
2.方法1（process.argv）
   是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个元素开始每个元素是一个运行参数。例如在argv.js中有如下代码console.log(pro	 
cess.argv);然后再命令行运行此命令：$node argv.js 1992 0319 yjy。结果为：['node','/home/byvoid/argv.js','1992','0319','yjy']	
3.方法2（process.stdout）标准输出流，process.stdout.write()函数提供了更底层的接口
4.方法3（process.stdin）标准输入流，初始时它是被暂停的，想要从标准输入读取数据，你必须恢复流，并手动编写流的事件响应函数
process.stdin.resume();
process.stdin.on('data',function(data)){
process.stdout.write('read from console:'+data.toString());
});
5.方法4（process.nextTick(callback)）为事件循环设置一项任务，Node.js会在下次事件循环响应时调用callback。因为一个Node.js进程只有一个线程，因此在任何时刻都只有一个事件在执行。如果这个事件占用大量的CPU时间，执行事件循环中的下一个事件就需要等待很久，因此Node.js的一个编程原则就是尽量缩短每个事件的执行时间。process.nextTick() 提供了一个这样的 工具，可以把复杂的工作拆散，变成一个个较小的事件。
更好理解该方法：http://www.oschina.net/translate/understanding-process-next-tick?cmp